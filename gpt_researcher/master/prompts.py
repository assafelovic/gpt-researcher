from datetime import datetime, timezone
import warnings
from gpt_researcher.utils.enum import ReportType


def generate_search_queries_prompt(question: str, parent_query: str, report_type: str, max_iterations: int=3,):
    """ Gera as sugest√µes de pesquisa para a pergunta dada.
    Args: 
        question (str): A pergunta para gerar as sugest√µes de pesquisa prompt para
        parent_query (str): A pergunta principal (apenas relevante para relat√≥rios detalhados)
        report_type (str): O tipo de relat√≥rio
        max_iterations (int): O n√∫mero m√°ximo de sugest√µes de pesquisa a serem geradas
    
    Returns: str: As sugest√µes de pesquisa para a pergunta fornecida
    """
    
    if report_type == ReportType.DetailedReport.value or report_type == ReportType.SubtopicReport.value:
        task = f"{parent_query} - {question}"
    else:
        task = question

    return f'Escreva {max_iterations} Consultas de pesquisa no Google para buscar online que formem uma opini√£o objetiva a partir da seguinte tarefa: "{task}"' \
           f'Utilize a data atual, se necess√°rio: {datetime.now().strftime("%B %d, %Y")}.\n' \
           f'Inclua tamb√©m nas consultas detalhes espec√≠ficos da tarefa, como locais, nomes, etc.\n' \
           f'Voc√™ deve responder com uma lista de strings no seguinte formato: ["query 1", "query 2", "query 3"].'


def generate_report_prompt(question, context, report_format="apa", total_words=1000):
    """ Gera o prompt de relat√≥rio para a pergunta e resumo da pesquisa fornecidos.

    Args:
        question (str): A pergunta para gerar o prompt de relat√≥rio
        research_summary (str): O resumo da pesquisa para gerar o prompt de relat√≥rio

    Returns:
        str: O prompt de relat√≥rio para a pergunta e resumo da pesquisa fornecidos
    """

    return f'Informa√ß√£o: """{context}"""\n\n' \
           f'Usando as informa√ß√µes acima, responda a seguinte' \
           f' pergunta ou tarefa: "{question}" em um relat√≥rio detalhado --' \
           " O relat√≥rio deve focar na resposta √† pergunta, ser bem estruturado, informativo," \
           f" em profundidade e abrangente, com fatos e n√∫meros, se dispon√≠veis, e um m√≠nimo de {total_words} palavras.\n" \
           "Voc√™ deve se esfor√ßar para escrever o relat√≥rio o mais longo poss√≠vel usando todas as informa√ß√µes relevantes e necess√°rias fornecidas.\n" \
           "Voc√™ deve escrever o relat√≥rio com a sintaxe markdown.\n " \
           f"Use um tom imparcial e jornal√≠stico. \n" \
           "VOC√ä DEVE determinar sua pr√≥pria opini√£o concreta e v√°lida com base nas informa√ß√µes fornecidas. N√ÉO fa√ßa conclus√µes gerais e sem sentido.\n" \
           f"VOC√ä DEVE escrever todos os URLs das fontes utilizadas no final do relat√≥rio como refer√™ncias, e certifique-se de n√£o adicionar fontes duplicadas, mas apenas uma refer√™ncia para cada.\n" \
           "Cada URL deve estar hiperlinkado: [url website](url)"\
           """
            Adicionalmente, VOC√ä DEVE incluir hyperlinks para os URLs relevantes onde quer que eles sejam referenciados no relat√≥rio:
        
            eg:    
                # Report Header
                
                This is a sample text. ([url website](url))
            """\
            f"VOC√ä DEVE escrever o relat√≥rio no formato {report_format}.\n " \
            f"Cite os resultados da pesquisa usando anota√ß√µes inline. Cite apenas os resultados mais \
            relevantes que respondam √† pergunta com precis√£o. Coloque essas cita√ß√µes no final \
            da frase ou par√°grafo que as referenciam.\n" \
            f"Por favor, fa√ßa o seu melhor, isso √© muito importante para a minha carreira. " \
            f"Assuma que a data atual √© {datetime.now().strftime('%B %d, %Y')}"


def generate_resource_report_prompt(question, context, report_format="apa", total_words=700):
    """Gera a sugest√£o de relat√≥rio de recursos para a pergunta e resumo da pesquisa fornecidos.

    Args:
        question (str): A pergunta para gerar a sugest√£o de relat√≥rio de recursos.
        context (str): O resumo da pesquisa para gerar a sugest√£o de relat√≥rio de recursos.

    Returns:
        str: A sugest√£o de relat√≥rio de recursos para a pergunta e resumo da pesquisa fornecidos.
    """
    return f'"""{context}"""\n\nCom base nas informa√ß√µes acima, gere um relat√≥rio de recomenda√ß√£o de bibliografia para a seguinte pergunta ou t√≥pico: "{question}". O relat√≥rio deve fornecer uma an√°lise detalhada de cada recurso recomendado, explicando como cada fonte pode contribuir para encontrar respostas para a pergunta de pesquisa.\n'
'Enfoque na relev√¢ncia, confiabilidade e import√¢ncia de cada fonte.\n'
'Certifique-se de que o relat√≥rio esteja bem estruturado, informativo, aprofundado e siga a sintaxe Markdown.\n'
'Inclua fatos, n√∫meros e dados relevantes sempre que dispon√≠veis.\n'
'O relat√≥rio deve ter um comprimento m√≠nimo de {total_words} palavras.\n'
'VOC√ä DEVE incluir todos os URLs relevantes das fontes.'\
        'Cada URL deve estar hiperlinkado: [url website](url)'


def generate_custom_report_prompt(query_prompt, context, report_format="apa", total_words=1000):
    return f'"{context}"\n\n{query_prompt}'


def generate_outline_report_prompt(question, context, report_format="apa", total_words=1200):
    """ Gera a sugest√£o de esbo√ßo do relat√≥rio para a pergunta e resumo da pesquisa fornecidos..
    Args: question (str): A pergunta para gerar a sugest√£o de esbo√ßo do relat√≥rio
            research_summary (str): O resumo da pesquisa para gerar a sugest√£o de esbo√ßo do relat√≥rio
    Returns: str: A sugest√£o de esbo√ßo do relat√≥rio para a pergunta e resumo da pesquisa fornecidos
    """

    return f'"""{context}""" Usando as informa√ß√µes acima, gere um esbo√ßo para um relat√≥rio de pesquisa em sintaxe Markdown' \
           f'o seguinte questionamento ou t√≥pico: "{question}". O esbo√ßo deve fornecer uma estrutura bem organizada' \
           ' para o relat√≥rio de pesquisa, incluindo as principais se√ß√µes, subse√ß√µes e pontos-chave a serem abordados.' \
           f' O relat√≥rio de pesquisa deve ser detalhado, informativo, aprofundado e ter um m√≠nimo de {total_words} palavras.' \
           ' Usando a sintaxe Markdown apropriada para formatar o esbo√ßo e garantir a legibilidade'


def auto_agent_instructions():
    return """
        Esta tarefa envolve pesquisar um t√≥pico espec√≠fico, independentemente de sua complexidade ou da disponibilidade de uma resposta definitiva. A pesquisa √© conduzida por um servidor espec√≠fico, definido por seu tipo e fun√ß√£o, sendo que cada servidor requer instru√ß√µes distintas.
        Agent
        O servidor √© determinado pelo campo do t√≥pico e pelo nome espec√≠fico do servidor que pode ser utilizado para pesquisar o t√≥pico fornecido. Os agentes s√£o categorizados por sua √°rea de especializa√ß√£o, e cada tipo de servidor est√° associado a um emoji correspondente.

        examples:
        task: "Devo investir em a√ß√µes da Apple?"
        response: 
        {
            "server": "üí∞ Agente Financeiro",
            "agent_role_prompt: "Voc√™ √© um assistente de intelig√™ncia artificial experiente em an√°lise financeira. Seu objetivo principal √© compor relat√≥rios financeiros abrangentes, perspicazes, imparciais e metodicamente organizados com base nos dados e tend√™ncias fornecidos."
        }
        task: "A revenda de t√™nis pode se tornar lucrativa?"
        response: 
        { 
            "server":  "üìà Agente de An√°lise de Neg√≥cios",
            "agent_role_prompt": "Voc√™ √© um assistente de intelig√™ncia artificial experiente em an√°lise de neg√≥cios. Seu principal objetivo √© produzir relat√≥rios empresariais abrangentes, perspicazes, imparciais e estruturados de forma sistem√°tica com base nos dados empresariais fornecidos, nas tend√™ncias de mercado e na an√°lise estrat√©gica."
        }
        task: "Quais s√£o os locais mais interessantes em Tel Aviv?"
        response:
        {
            "server:  "üåç Agente de Viagens",
            "agent_role_prompt": "Voc√™ √© um assistente de intelig√™ncia artificial experiente em viagens pelo mundo. Seu principal objetivo √© elaborar relat√≥rios de viagem envolventes, esclarecedores, imparciais e bem estruturados sobre locais espec√≠ficos, incluindo hist√≥ria, atra√ß√µes e informa√ß√µes culturais."
        }
    """


def generate_summary_prompt(query, data):
    """ Gera o prompt de resumo para a pergunta e texto fornecidos.
    Args: question (str): A pergunta para gerar o prompt de resumo para
            text (str): O texto para gerar o prompt de resumo para
    Returns: str: O prompt de resumo para a pergunta e texto fornecidos
    """

    return f'{data}\n Usando o texto acima, resuma-o com base na seguinte tarefa ou consulta: "{query}". Se a ' \
           f'consulta n√£o puder ser respondida usando o texto, VOC√ä DEVE resumir o texto de\n forma resumida. Inclua todas as informa√ß√µes factuais, ' \
           f'como n√∫meros, estat√≠sticas, cita√ß√µes, etc., se dispon√≠veis. '


################################################################################################

# DETAILED REPORT PROMPTS

def generate_subtopics_prompt() -> str:
    return """
                Fornecido o t√≥pico principal:
                
                {task}
                
                e dados de pesquisa:
                
                {data}
                
                - Construa uma lista de subtemas que indiquem os t√≠tulos de um documento de relat√≥rio a ser gerado sobre a tarefa.
                - Esta √© uma lista poss√≠vel de subtemas: {subtopics}.
                - N√£o deve haver subtemas duplicados.
                - Limite o n√∫mero de subtemas a um m√°ximo de {max_subtopics}.
                - Por fim, ordene os subtemas de acordo com suas tarefas, em uma ordem relevante e significativa que seja apresent√°vel em um relat√≥rio detalhado.
                
                "IMPORTANT!":
                - Cada subtema DEVE ser relevante para o t√≥pico principal e aos dados de pesquisa fornecidos SOMENTE!
                
                {format_instructions}
            """


def generate_subtopic_report_prompt(
    current_subtopic,
    existing_headers,
    main_topic,
    context,
    report_format="apa",
    total_words=1000,
    max_subsections=5,
) -> str:

    return f"""
    "Context":
    "{context}"
    
    "T√≥pico Principal e Subt√≥pico":
    Com base nas informa√ß√µes mais recentes dispon√≠veis, elabore um relat√≥rio detalhado sobre o subt√≥pico: {current_subtopic} dentro do t√≥pico principal: {main_topic}.
Voc√™ deve limitar o n√∫mero de subse√ß√µes a um m√°ximo de {max_subsections}.
    
    "Foco do Conte√∫do":
    - O relat√≥rio deve focar em responder √† pergunta, ser bem estruturado, informativo, aprofundado e incluir fatos e n√∫meros, se dispon√≠veis.
    - Utilize a sintaxe Markdown e siga o formato {report_format.upper()}.
    
    "Estrutura e Formata√ß√£o":
- Como este sub-relat√≥rio far√° parte de um relat√≥rio maior, inclua apenas o corpo principal dividido em subt√≥picos adequados, sem qualquer se√ß√£o de introdu√ß√£o ou conclus√£o.
    
    - VOC√ä DEVE incluir hiperlinks em markdown para URLs de fontes relevantes sempre que referenciadas no relat√≥rio, por exemplo:
    
        # Cabe√ßalho do Relat√≥rio
        
        Este √© um texto de exemplo. ([url website](url))
    
    "Relat√≥rios de Subt√≥picos Existentes":
        - Esta √© uma lista de relat√≥rios de subt√≥picos existentes e seus cabe√ßalhos de se√ß√£o:
    
        {existing_headers}.
    
    - N√£o utilize nenhum dos cabe√ßalhos acima ou detalhes relacionados para evitar duplica√ß√µes. Use cabe√ßalhos menores em Markdown (por exemplo, H2 ou H3) para a estrutura do conte√∫do, evitando o maior cabe√ßalho (H1), pois ele ser√° usado para o t√≠tulo do relat√≥rio maior.
    
    "Date":
    Assuma que a data atual √© {datetime.now(timezone.utc).strftime('%d de %B de %Y')} se necess√°rio.
    
    "IMPORTANT!":
    - O foco DEVE estar no t√≥pico principal! Voc√™ DEVE deixar de fora qualquer informa√ß√£o que n√£o esteja relacionada a ele!
    - N√ÉO deve haver introdu√ß√£o, conclus√£o, resumo ou se√ß√£o de refer√™ncias.
    - Voc√™ DEVE incluir hyperlinks com a sintaxe markdown ([url website](url)) relacionados √†s frases sempre que necess√°rio.
    - O relat√≥rio deve ter um comprimento m√≠nimo de {total_words} palavras.
    """


def generate_report_introduction(question: str, research_summary: str = "") -> str:
    return f"""{research_summary}\n 
        Usando as informa√ß√µes mais recentes acima, prepare uma introdu√ß√£o detalhada do relat√≥rio sobre o t√≥pico -- {question}.
        - A introdu√ß√£o deve ser sucinta, bem estruturada e informativa, com sintaxe markdown.
        - Como esta introdu√ß√£o far√° parte de um relat√≥rio maior, N√ÉO inclua outras se√ß√µes, que geralmente est√£o presentes em um relat√≥rio.
        - A introdu√ß√£o deve ser precedida por um t√≠tulo H1 com um t√≥pico adequado para o relat√≥rio completo.
        - Voc√™ deve incluir hyperlinks com sintaxe markdown ([url website](url)) relacionados √†s frases sempre que necess√°rio.
        - Assuma que a data atual √© {datetime.now(timezone.utc).strftime('%d de %B de %Y')} se necess√°rio.
    """


report_type_mapping = {
    ReportType.ResearchReport.value: generate_report_prompt,
    ReportType.ResourceReport.value: generate_resource_report_prompt,
    ReportType.OutlineReport.value: generate_outline_report_prompt,
    ReportType.CustomReport.value: generate_custom_report_prompt,
    ReportType.SubtopicReport.value: generate_subtopic_report_prompt
}


def get_prompt_by_report_type(report_type):
    prompt_by_type = report_type_mapping.get(report_type)
    default_report_type = ReportType.ResearchReport.value
    if not prompt_by_type:
        warnings.warn(f"Tipo de relat√≥rio inv√°lido: {report_type}.\n"
                        f"Por favor, use um dos seguintes: {', '.join([enum_value for enum_value in report_type_mapping.keys()])}\n"
                        f"Usando tipo de relat√≥rio padr√£o: {default_report_type} prompt.",
                        UserWarning)
        prompt_by_type = report_type_mapping.get(default_report_type)
    return prompt_by_type
