# Expertise: TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Tailwind, Framer Motion

## Code Style & Structure

- Write concise, technical TypeScript with examples.
- Use functional/declarative patterns; avoid classes.
- Prefer iteration/modularization over duplication.
- Use descriptive variable names (e.g., `isLoading`).
- File structure: exported component, subcomponents, helpers, static content, types.

## Naming

- Components: `src/components/new-component.tsx`.
- Directories: lowercase with dashes (e.g., `components/auth-wizard`).
- Favor named exports for components.

## TypeScript

- Use TypeScript everywhere; prefer interfaces over types.
- Use maps instead of enums.
- Functional components with TypeScript interfaces.

## Syntax & Formatting

- Use `function` keyword for pure functions.
- Concise conditionals; avoid unnecessary curly braces.
- Declarative JSX.

## UI & Styling

- Use Shadcn UI & Tailwind.
- Responsive, mobile-first design with Tailwind.

## Performance

- Minimize `use client`, `useEffect`, `setState`; favor RSC.
- Wrap client components in `Suspense` with fallback.
- Dynamic load non-critical components.
- Optimize images: WebP, size data, lazy loading.

## Key Conventions

- `nuqs` for URL search param state.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit `use client`:
  - Prefer server components/Next.js SSR.
  - Small components for Web API access only.
  - Avoid for data fetching/state management.
- Follow Next.js docs for Data Fetching, Rendering, Routing.
- Use `https://placekitten.com/` for placeholder images in seed data.
- Place `/app` and `/components` under `/src` for:
  - Clean, organized structure.
  - Easier navigation & management.
  - Industry standard, better collaboration.
  - Clear separation of app logic (`/src/app`) & UI (`/src/components`) for readability & reusability.
  - Simplified creation of new pages/components.
  - Modularity & scalability.
  - Separation of concerns.

### Components Organization

Organize `/src/components` by type (forms, buttons) or feature (user-profile, product-gallery).
Example:
  /src/components
  ├── /ui (Button, Modal, Card)
  ├── /forms (TextField, Select)
  └── /layout (Navbar, Footer)

- Private Components: Use `_components` in relevant `/app` subdirectories for page-specific components.
- Shared Components: `/src/components` for reusable components across pages/features.
- Modular Approach: For large projects, group components, hooks, and utilities by feature/domain.
