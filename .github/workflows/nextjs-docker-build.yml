name: NextJS Docker Build and Push (per-architecture)
run-name: Building and pushing NextJS Docker images â€“ matrix

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write # Needed for pushing to GHCR

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.repository_owner }}/gptr-nextjs
  REGISTRY_IMAGE: ghcr.io/${{ github.repository_owner }}/gptr-nextjs

jobs:
  build:
    name: Build & push ${{ matrix.platform }}
    continue-on-error: true
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64   # GitHub hosted runner native arch
            arch: amd64
          - platform: linux/arm64
            arch: arm64
          - platform: linux/arm64/v8
            arch: arm64v8
          - platform: linux/arm64/v7
            arch: arm64v7
          - platform: linux/arm64/v6
            arch: arm64v6
          - platform: linux/arm
            arch: arm
          - platform: linux/arm/v8
            arch: armv8
          - platform: linux/arm/v7
            arch: armv7
          - platform: linux/arm/v6
            arch: armv6
          - platform: linux/386
            arch: 386
          - platform: linux/ppc64le
            arch: ppc64le
          - platform: linux/s390x
            arch: s390x
          - platform: linux/riscv64
            arch: riscv64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') || github.ref == format('refs/heads/{0}', 'master') }}

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME || github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image for ${{ matrix.platform }}
        id: build
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/nextjs
          file: ./frontend/nextjs/Dockerfile
          push: true
          platforms: ${{ matrix.platform }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.arch }}
            ${{ env.REGISTRY_IMAGE }}:${{ matrix.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=gptr-nextjs-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=gptr-nextjs-${{ matrix.arch }}

      - name: Export digest
        if: ${{ always() && steps.build.outputs.digest }}
        run: echo "DIGEST=${{ steps.build.outputs.digest }}" > digest.txt

      - name: Upload digest
        if: ${{ always() && steps.build.outputs.digest }}
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ matrix.arch }}
          path: digest.txt

      - name: Update multi-arch manifest with ${{ matrix.platform }}
        if: github.event_name != 'pull_request' && steps.build.outcome == 'success'
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          REGISTRY_IMAGE: ${{ env.REGISTRY_IMAGE }}
        run: |
          set -euo pipefail
          platforms=(amd64 arm64 armv7 armv6 386 ppc64le s390x riscv64)
          refs=""
          for p in "${platforms[@]}"; do
            if docker manifest inspect "$IMAGE_NAME:$p" >/dev/null 2>&1; then
              refs+=" $IMAGE_NAME:$p"
            fi
          done

          [ -z "$refs" ] && refs="$IMAGE_NAME:${{ matrix.arch }}"

          IFS=$'\n' read -rd '' -a tags <<< "${{ steps.meta.outputs.tags }}"
          for t in "${tags[@]}"; do
            echo "Updating manifest $t with refs: $refs"
            docker buildx imagetools create --push --append -t "$t" $refs
          done

  manifest:
    name: Create & push multi-arch manifest
    if: always()
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digest-*
          path: digests

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub (again)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME || github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') || github.ref == format('refs/heads/{0}', 'master') }}

      - name: Create manifest list
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          REGISTRY_IMAGE: ${{ env.REGISTRY_IMAGE }}
        run: |
          set -euo pipefail
          platforms=(amd64 arm64 armv7 armv6 386 ppc64le s390x riscv64)
          refs=""
          for p in "${platforms[@]}"; do
            if docker manifest inspect "$IMAGE_NAME:$p" >/dev/null 2>&1; then
              refs+=" $IMAGE_NAME:$p"
            fi
          done
          [ -z "$refs" ] && echo "No images to combine" && exit 0

          IFS=$'\n' read -rd '' -a tags <<< "${{ steps.meta.outputs.tags }}"
          for t in "${tags[@]}"; do
            echo "Creating manifest for tag $t"
            docker buildx imagetools create -t "$t" $refs
          done
